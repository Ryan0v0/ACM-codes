#include <bits/stdc++.h>

#define F(i, s, t) for(int i=(s);i<=(t);i++)
#define D(i, s, t) for(int i=(s);i>=(t);i--)
#define mec(a, x) memset(a,x,sizeof(a))
#define INF 1000000000
using namespace std;
typedef long long LL;

inline LL read() {
    LL x = 0LL, f = 1LL;
    char ch = getchar();
    while (ch < '0' || ch > '9') {
        if (ch == '-')f = -1LL;
        ch = getchar();
    }
    while (ch >= '0' && ch <= '9') {
        x = 10LL * x + ch - '0';
        ch = getchar();
    }
    return x * f;
}

const int N = 2010;
int n;
int g[N][N], cnt[N][N];

bool judge() {
    F(i, 1, n) F(j, 1, n) {
            if (g[i][j] == 1) {
                F(k, 1, n) {
                    if (g[k][j] == 1) {
                        cnt[min(k, i)][max(k, i)]++;
                        if (cnt[min(k, i)][max(k, i)] > 1) {
                            return 1;
                        }
                    }
                }
            }
        }
    return 0;
}

int main() {
    cout<<2000/9<<endl;
    cout<<222*9<<endl;
    cout<<sqrt(2000)<<endl;//44.7214
    cout<<sqrt(44.7214)<<endl;//6.68741
    n=read();
    F(i,1,n) F(j,1,n) g[i][j]=read();
    cout<<judge()<<endl;
}
/*
注意输出格式转换!
4
0 0 0 0
0 1 1 1
0 0 0 0
0 0 0 0

1 1 1 1 1 1 1
1 1 0 0 0 0 0
1 0 1 0 0 0 0
1 0 0 1 0 0 0
1 0 0 0 1 0 0
1 0 0 0 0 1 0
1 1 0 0 0 0 1

0 1 0 0 0 0 0
1 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 1 0 0 0
0 0 0 0 1 0 0
0 0 0 0 0 1 0
0 0 0 0 0 0 1

1 0 0 0 0 0 1
1 1 0 0 0 1 0
0 1 1 0 1 0 0
0 0 1 1 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0

1 0 0 0 0 0 1
1 1 0 0 0 1 1
0 1 1 0 1 1 0
0 0 1 1 1 0 0
0 0 0 1 1 0 0
0 0 0 0 1 1 0
0 0 0 0 0 1 1

1 0 0 0 0 0 1
1 1 0 0 0 0 1
0 1 1 0 1 0 0
0 0 1 1 1 0 0
0 0 0 1 1 0 0
0 0 0 0 1 1 0
0 0 0 0 0 1 1


1 0 1 0 0 0 0 0 1
0 1 0 0 0 0 0 1 0
0 0 1 0 0 0 1 0 0
0 0 1 1 0 0 0 0 0
0 1 0 0 1 0 0 0 0
1 0 0 0 0 1 0 0 0
0 0 0 0 0 1 1 0 0
0 0 0 0 1 0 0 1 0
0 0 0 1 0 0 0 0 1

1 0 0 1 0 0 0 0 0 0 0 1
0 1 1 0 0 0 0 0 0 0 1 0
1 0 1 0 0 0 0 0 0 1 0 0
0 1 0 1 0 0 0 1 1 0 0 0
0 0 0 1 1 0 1 0 0 0 0 0
0 0 1 0 0 1 0 0 0 0 0 0
0 1 0 0 1 0 1 0 0 0 0 0
1 0 0 0 0 1 0 1 0 0 0 0
0 0 0 0 0 0 0 1 1 0 0 1
0 0 0 0 0 0 1 0 0 1 1 0
0 0 0 0 0 1 0 0 1 0 1 0
0 0 0 0 1 0 0 0 0 1 0 1


1 0 0 1 0 0 0 0 0 1
0 1 1 0 0 0 0 0 1 0
1 0 1 0 0 0 0 1 0 0
0 1 0 1 0 0 1 0 0 0
0 0 0 1 0 1 0 0 0 0
0 0 1 0 1 0 0 0 0 0
0 1 0 0 0 1 0 0 0 0
1 0 0 0 1 0 0 0 0 0
0 0 0 0 0 0 1 0 0 1
0 0 0 0 0 1 0 1 1 0
0 0 0 0 1 0 1 0 1 0
0 0 0 0 0 0 0 1 0 1

*/